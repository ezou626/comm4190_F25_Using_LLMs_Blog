Speaker 1
Code, testing, and dev infra should be prioritized over comprehensive documentation.


Speaker 2
While code, testing, and development infrastructure are indeed crucial components of the software development lifecycle, the importance of comprehensive documentation shouldn't be underestimated. 

Prioritizing only development aspects can lead to problems in the long run, especially when it comes to onboarding new team members, managing handovers, maintaining code, and ensuring that systems are understood correctly by all stakeholders. Comprehensive documentation serves as a knowledge base that complements the code, providing context, rationale, and insights that aren't always apparent from the code itself.

Some may argue that code is self-documenting or that good tests negate the need for documentation, but this isn't always true. While code and tests show what a system does, they don't always explain why choices were made. Inconsistent or incomplete documentation can lead to misunderstandings, mismanagement, and technical debt.

That said, documentation should be kept up-to-date and useful, which means it needs strategic prioritization along with code, testing, and infrastructure to ensure it adds value.

How do you see the balance between these elements?


Speaker 1
You bring up valid points about the role of comprehensive documentation in the software development process. However, prioritizing code, testing, and development infrastructure over documentation has its own significant benefits. 

Firstly, working systems are foundational. Code, tests, and infrastructure are directly responsible for building, verifying, and deploying functional products. Without a solid base in these areas, documentation becomes moot because you're documenting a system that might not work effectively or at all. Prioritizing these technical aspects ensures a reliable product, which is always the primary goal.

Moreover, comprehensive documentation can often become outdated quickly, particularly in agile development environments where changes are frequent. Time invested in maintaining exhaustive documentation might be better spent on improving the product itself through iterating on code quality, test coverage, and infrastructure robustness. 

Tests, particularly when written well, can serve both as documentation and verification. They illustrate use cases and expected behaviors, which are often the most critical aspects for developers maintaining or extending the code.

It's also important to recognize that documentation quality matters more than quantity. Focused and strategic documentation—like architecture diagrams or API documentation—can offer more value than verbose documentation.  

While documentation is essential, especially for onboarding and handoffs, ensuring that the codebase is clean, well-tested, and deployed on solid infrastructure can reduce the need for extensive documentation. By getting the fundamentals right, the necessity for extensive documentation is minimized, making what documentation does exist more impactful and relevant.

In summary, while documentation supports understanding and continuity, it should not overshadow the core elements of code, testing, and infrastructure, which are critical to delivering and maintaining a functional product.


Speaker 2
You make a compelling case for focusing on functional product elements first. I agree that without a working system, documentation lacks purpose. Reliable code, thorough testing, and solid infrastructure are indeed crucial for a functional product, and establishing this foundation is imperative.

Moreover, in fast-paced agile environments, documentation can easily become a burden if it doesn't evolve with the product. I also appreciate your point about tests doubling as documentation. Tests can certainly demonstrate expected behavior, providing a live form of documentation that evolves with the code.

However, I'd argue that the role of documentation as a tool for communication shouldn't be undervalued. While tests show what the code does, they might not effectively communicate the overall system design, decision-making processes, or future direction. This is especially true for complex systems where architecture and integration play a major role.

In practice, a balance can be struck. Instead of comprehensive documentation that attempts to cover every detail, a focus on strategic documentation, such as high-level overviews, API references, and key decision records, can complement code and tests effectively. This targeted documentation can alleviate some concerns about maintenance overhead while still providing critical insights that code and tests might not capture.

Ultimately, a healthy balance between these elements can ensure that a product is both robust and sustainable. Would you agree that there's room for strategic documentation alongside priorities like code and testing, especially if it's limited and purposeful?


Speaker 1
I do agree that there is room for strategic documentation, especially if it's focused and purposeful. The key is to avoid documentation becoming an overwhelming burden that detracts from developing and maintaining a high-quality product. Strategic documentation, like high-level architectural overviews and API references, can indeed complement code and tests by providing context that might not be readily apparent from inspecting the codebase alone.

Moreover, maintaining records of key decisions can be invaluable, particularly for understanding design choices and guiding future development. This form of documentation can serve as a roadmap for both current team members and new hires, facilitating smoother onboarding and transitions.

However, even with strategic documentation, I maintain that the foundation of a product’s success lies in robust code, comprehensive testing, and reliable infrastructure. These elements ensure that the product functions as intended in real-world conditions and can adapt to future changes. Documentation does support communication and continuity, but the reliance on it should not overshadow the continuous improvement of the product itself.

In the end, the objective should be to keep documentation succinct and relevant, providing just enough insight to accompany a thorough codebase supported by tests. This way, documentation aligns with the dynamic and often fast-paced nature of software development, supporting rather than hindering the primary goal of delivering a highly functional product. So, yes, strategic documentation has its place, but always in a supporting role to the more immediate priorities of code, testing, and infrastructure.
